{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_NotEnoughEtherEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle_UpKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "Raffle_RecentWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "Raffle_RequestedRaffleWinner",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EnterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upKeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "Index",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9df05221bc5eaa549a5eaec8ea21c4e1f4fd42a4b60aef747fffbfa2adfa5247",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1277370",
    "logsBloom": "0x
    "blockHash": "0xdf101ee03b5f85a1a9776b3d4ddac636b73989483a9931a50b0a378a857597fb",
    "transactionHash": "0x9df05221bc5eaa549a5eaec8ea21c4e1f4fd42a4b60aef747fffbfa2adfa5247",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1277370",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "1",
    "5000000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "d451beb84bf43ce130ece970ab732a28",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_NotEnoughEtherEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle_UpKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"Raffle_RecentWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"Raffle_RequestedRaffleWinner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EnterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upKeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MLT\\n\\npragma solidity 0.8.7;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\n error Raffle_NotEnoughEtherEntered();\\n error Raffle_TransferFailed();\\n error Raffle_NotOpen();\\n error Raffle_UpKeepNotNeeded(uint256 currentBalance, uint numPlayers, uint raffleState );\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface{\\n\\nenum RaffleState{\\n    Open,\\n    calculating,\\n    Closed\\n}\\n    event Raffle_RequestedRaffleWinner(uint256 indexed requestId);\\n    event RaffleEnter(address indexed player); //emits an event that aplayer joined the lottery\\n    event Raffle_RecentWinner(address indexed winner);\\n\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface public vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant numWords = 1;\\n    uint256 private immutable i_interval;\\n\\n    //lottery variables\\n\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint private s_lastTimeStamp;\\n\\n    constructor(uint entranceFee, address vrfCoordinatorV2, bytes32 gasLane, uint64 subscriptionId,\\n     uint32 callbackGasLimit, uint interval) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.Open;\\n        i_interval = interval;\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n    function checkUpkeep(bytes memory /*checkData*/) public override returns(bool upKeepNeeded, bytes memory /*performData*/){\\n        bool isOpen = (s_raffleState == RaffleState.Open);\\n        bool timePassed = (block.timestamp - s_lastTimeStamp > i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = (address(this).balance > 0);\\n        upKeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n\\n\\n\\n    }\\n\\n    function EnterRaffle() public payable{\\n        if(msg.value<i_entranceFee){\\n            revert Raffle_NotEnoughEtherEntered();\\n        }\\n        if(s_raffleState != RaffleState.Open){\\n            revert Raffle_NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n\\n    }\\n\\n\\n    function performUpkeep(bytes calldata /*performData*/) external override  {\\n\\n        (bool upKeepNeeded,) = checkUpkeep(\\\"\\\");\\n        if(!upKeepNeeded){\\n            revert Raffle_UpKeepNotNeeded(address(this).balance, s_players.length, uint256(s_raffleState));\\n        }\\n\\n        s_raffleState = RaffleState.calculating;\\n\\n         uint256 requestId = vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            numWords\\n         );\\n         emit Raffle_RequestedRaffleWinner(requestId);\\n\\n\\n    }\\n\\n    function fulfillRandomWords(uint requestId, uint256[] memory randomWords) internal override {\\n        uint winnerIndex = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[winnerIndex];\\n         s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.Open;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if(!success){\\n            revert Raffle_TransferFailed();\\n        }\\n        emit Raffle_RecentWinner(recentWinner);\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n\\n\\n    }\\n\\n    function getEntranceFee() public view returns(uint){\\n        return i_entranceFee;\\n    }\\n    function getPlayers(uint Index) public view returns(address){\\n        return s_players[Index];\\n    }\\n        function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n    function getNumberOfPlayers() public view returns(uint){\\n        return s_players.length;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return numWords;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n    function getInterval() public view returns(uint256){\\n    return i_interval;\\n    }\\n    function getLastTimeStamp() public view returns(uint256){\\n        return s_lastTimeStamp;\\n    }\\n    function getRecentWinner() public view returns(address){\\n        return s_recentWinner;\\n    } \\n} \",\"keccak256\":\"0x031a0b0a1718d72664be2ed6ee012cd52c45f9da067ddb657f9978ef0f7b72b6\",\"license\":\"MLT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162001902380380620019028339818101604052810190620000389190620001b6565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508560a0818152505084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508163ffffffff166101008163ffffffff1660e01b815250506000600260146101000a81548160ff02191690836002811115620001225762000121620002be565b5b02179055508061012081815250504260038190555050505050505062000374565b6000815190506200015481620002f2565b92915050565b6000815190506200016b816200030c565b92915050565b600081519050620001828162000326565b92915050565b600081519050620001998162000340565b92915050565b600081519050620001b0816200035a565b92915050565b60008060008060008060c08789031215620001d657620001d5620002ed565b5b6000620001e689828a0162000171565b9650506020620001f989828a0162000143565b95505060406200020c89828a016200015a565b94505060606200021f89828a016200019f565b93505060806200023289828a0162000188565b92505060a06200024589828a0162000171565b9150509295509295509295565b60006200025f8262000270565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002fd8162000252565b81146200030957600080fd5b50565b620003178162000266565b81146200032357600080fd5b50565b620003318162000290565b81146200033d57600080fd5b50565b6200034b816200029a565b81146200035757600080fd5b50565b6200036581620002aa565b81146200037157600080fd5b50565b60805160601c60a05160c05160e05160c01c6101005160e01c61012051611520620003e26000396000818161087b01526108e9015260006106e4015260006106c1015260006106a0015260008181610340015261043d01526000818161037d01526103d101526115206000f3fe6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610290578063a3e56fa8146102bb578063c1c244e8146102e6578063fd6673f514610311576100dd565b806353a2c19a146101fc5780635f1b0fd8146102275780636e04ff0d14610252576100dd565b806325d2528e116100bb57806325d2528e146101615780634585e33b1461016b578063460e204914610194578063473f1ddc146101d1576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b60405161010491906110f0565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f91906110d5565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610e9f565b61037b565b005b61016961043b565b005b34801561017757600080fd5b50610192600480360381019061018d9190610daf565b6105aa565b005b3480156101a057600080fd5b506101bb60048036038101906101b69190610e45565b6107ac565b6040516101c89190610ff3565b60405180910390f35b3480156101dd57600080fd5b506101e66107f3565b6040516101f39190610ff3565b60405180910390f35b34801561020857600080fd5b5061021161081d565b60405161021e91906110f0565b60405180910390f35b34801561023357600080fd5b5061023c61082c565b60405161024991906110f0565b60405180910390f35b34801561025e57600080fd5b5061027960048036038101906102749190610dfc565b610839565b604051610287929190611037565b60405180910390f35b34801561029c57600080fd5b506102a56108e5565b6040516102b291906110f0565b60405180910390f35b3480156102c757600080fd5b506102d061090d565b6040516102dd91906110ba565b60405180910390f35b3480156102f257600080fd5b506102fb610933565b60405161030891906110f0565b60405180910390f35b34801561031d57600080fd5b5061032661093d565b60405161033391906110f0565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161042492919061100e565b60405180910390fd5b6104378282610949565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610495576040517f7fe3810300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028111156104a9576104a8611400565b5b600260149054906101000a900460ff1660028111156104cb576104ca611400565b5b14610502576040517fd6e19a8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105c460405180602001604052806000815250610839565b509050806106335747600080549050600260149054906101000a900460ff1660028111156105f5576105f4611400565b5b6040517fc61de3e100000000000000000000000000000000000000000000000000000000815260040161062a9392919061110b565b60405180910390fd5b6001600260146101000a81548160ff0219169083600281111561065957610658611400565b5b02179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610725959493929190611067565b602060405180830381600087803b15801561073f57600080fd5b505af1158015610753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107779190610e72565b9050807f63c89e9c2f6ef051d628482ef4e135d24b25a90e93e85c3be1b195b029cfac8060405160405180910390a250505050565b60008082815481106107c1576107c061142f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b60006060600080600281111561085257610851611400565b5b600260149054906101000a900460ff16600281111561087457610873611400565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600354426108a891906111eb565b119050600080600080549050119050600080471190508380156108c85750825b80156108d15750815b80156108da5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600354905090565b60008080549050905090565b60008080549050826000815181106109645761096361142f565b5b60200260200101516109769190611371565b9050600080828154811061098d5761098c61142f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff02191690836002811115610a2157610a20611400565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a4c90610fde565b60006040518083038185875af1925050503d8060008114610a89576040519150601f19603f3d011682016040523d82523d6000602084013e610a8e565b606091505b5050905080610ac9576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f0882625dff0945b5b56ae064433ad75087d6af1e762d31d793e4b10efa5589eb60405160405180910390a2600067ffffffffffffffff811115610b2757610b2661145e565b5b604051908082528060200260200182016040528015610b555781602001602082028036833780820191505090505b5060009080519060200190610b6b929190610b7a565b50426003819055505050505050565b828054828255906000526020600020908101928215610bf3579160200282015b82811115610bf25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b9a565b5b509050610c009190610c04565b5090565b5b80821115610c1d576000816000905550600101610c05565b5090565b6000610c34610c2f84611167565b611142565b90508083825260208201905082856020860282011115610c5757610c56611497565b5b60005b85811015610c875781610c6d8882610d85565b845260208401935060208301925050600181019050610c5a565b5050509392505050565b6000610ca4610c9f84611193565b611142565b905082815260208101848484011115610cc057610cbf61149c565b5b610ccb8482856112fe565b509392505050565b600082601f830112610ce857610ce7611492565b5b8135610cf8848260208601610c21565b91505092915050565b60008083601f840112610d1757610d16611492565b5b8235905067ffffffffffffffff811115610d3457610d3361148d565b5b602083019150836001820283011115610d5057610d4f611497565b5b9250929050565b600082601f830112610d6c57610d6b611492565b5b8135610d7c848260208601610c91565b91505092915050565b600081359050610d94816114d3565b92915050565b600081519050610da9816114d3565b92915050565b60008060208385031215610dc657610dc56114a6565b5b600083013567ffffffffffffffff811115610de457610de36114a1565b5b610df085828601610d01565b92509250509250929050565b600060208284031215610e1257610e116114a6565b5b600082013567ffffffffffffffff811115610e3057610e2f6114a1565b5b610e3c84828501610d57565b91505092915050565b600060208284031215610e5b57610e5a6114a6565b5b6000610e6984828501610d85565b91505092915050565b600060208284031215610e8857610e876114a6565b5b6000610e9684828501610d9a565b91505092915050565b60008060408385031215610eb657610eb56114a6565b5b6000610ec485828601610d85565b925050602083013567ffffffffffffffff811115610ee557610ee46114a1565b5b610ef185828601610cd3565b9150509250929050565b610f048161121f565b82525050565b610f1381611231565b82525050565b610f228161123d565b82525050565b6000610f33826111c4565b610f3d81856111cf565b9350610f4d81856020860161130d565b610f56816114ab565b840191505092915050565b610f6a816112b6565b82525050565b610f79816112c8565b82525050565b6000610f8c6000836111e0565b9150610f97826114bc565b600082019050919050565b610fab8161125a565b82525050565b610fba81611288565b82525050565b610fc981611292565b82525050565b610fd8816112a2565b82525050565b6000610fe982610f7f565b9150819050919050565b60006020820190506110086000830184610efb565b92915050565b60006040820190506110236000830185610efb565b6110306020830184610efb565b9392505050565b600060408201905061104c6000830185610f0a565b818103602083015261105e8184610f28565b90509392505050565b600060a08201905061107c6000830188610f19565b6110896020830187610fcf565b6110966040830186610fa2565b6110a36060830185610fc0565b6110b06080830184610fc0565b9695505050505050565b60006020820190506110cf6000830184610f61565b92915050565b60006020820190506110ea6000830184610f70565b92915050565b60006020820190506111056000830184610fb1565b92915050565b60006060820190506111206000830186610fb1565b61112d6020830185610fb1565b61113a6040830184610fb1565b949350505050565b600061114c61115d565b90506111588282611340565b919050565b6000604051905090565b600067ffffffffffffffff8211156111825761118161145e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111ae576111ad61145e565b5b6111b7826114ab565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006111f682611288565b915061120183611288565b925082821015611214576112136113a2565b5b828203905092915050565b600061122a82611268565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611255826114bf565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006112c1826112da565b9050919050565b60006112d382611247565b9050919050565b60006112e5826112ec565b9050919050565b60006112f782611268565b9050919050565b82818337600083830152505050565b60005b8381101561132b578082015181840152602081019050611310565b8381111561133a576000848401525b50505050565b611349826114ab565b810181811067ffffffffffffffff821117156113685761136761145e565b5b80604052505050565b600061137c82611288565b915061138783611288565b925082611397576113966113d1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600381106114d0576114cf611400565b5b50565b6114dc81611288565b81146114e757600080fd5b5056fea26469706673582212204ce4e4ca5a66f53b2762dfb39b0edfbb64c8a13a90c9f6b4c1264ca627e0070564736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610290578063a3e56fa8146102bb578063c1c244e8146102e6578063fd6673f514610311576100dd565b806353a2c19a146101fc5780635f1b0fd8146102275780636e04ff0d14610252576100dd565b806325d2528e116100bb57806325d2528e146101615780634585e33b1461016b578063460e204914610194578063473f1ddc146101d1576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b60405161010491906110f0565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f91906110d5565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610e9f565b61037b565b005b61016961043b565b005b34801561017757600080fd5b50610192600480360381019061018d9190610daf565b6105aa565b005b3480156101a057600080fd5b506101bb60048036038101906101b69190610e45565b6107ac565b6040516101c89190610ff3565b60405180910390f35b3480156101dd57600080fd5b506101e66107f3565b6040516101f39190610ff3565b60405180910390f35b34801561020857600080fd5b5061021161081d565b60405161021e91906110f0565b60405180910390f35b34801561023357600080fd5b5061023c61082c565b60405161024991906110f0565b60405180910390f35b34801561025e57600080fd5b5061027960048036038101906102749190610dfc565b610839565b604051610287929190611037565b60405180910390f35b34801561029c57600080fd5b506102a56108e5565b6040516102b291906110f0565b60405180910390f35b3480156102c757600080fd5b506102d061090d565b6040516102dd91906110ba565b60405180910390f35b3480156102f257600080fd5b506102fb610933565b60405161030891906110f0565b60405180910390f35b34801561031d57600080fd5b5061032661093d565b60405161033391906110f0565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161042492919061100e565b60405180910390fd5b6104378282610949565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610495576040517f7fe3810300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028111156104a9576104a8611400565b5b600260149054906101000a900460ff1660028111156104cb576104ca611400565b5b14610502576040517fd6e19a8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105c460405180602001604052806000815250610839565b509050806106335747600080549050600260149054906101000a900460ff1660028111156105f5576105f4611400565b5b6040517fc61de3e100000000000000000000000000000000000000000000000000000000815260040161062a9392919061110b565b60405180910390fd5b6001600260146101000a81548160ff0219169083600281111561065957610658611400565b5b02179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610725959493929190611067565b602060405180830381600087803b15801561073f57600080fd5b505af1158015610753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107779190610e72565b9050807f63c89e9c2f6ef051d628482ef4e135d24b25a90e93e85c3be1b195b029cfac8060405160405180910390a250505050565b60008082815481106107c1576107c061142f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b60006060600080600281111561085257610851611400565b5b600260149054906101000a900460ff16600281111561087457610873611400565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600354426108a891906111eb565b119050600080600080549050119050600080471190508380156108c85750825b80156108d15750815b80156108da5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600354905090565b60008080549050905090565b60008080549050826000815181106109645761096361142f565b5b60200260200101516109769190611371565b9050600080828154811061098d5761098c61142f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff02191690836002811115610a2157610a20611400565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a4c90610fde565b60006040518083038185875af1925050503d8060008114610a89576040519150601f19603f3d011682016040523d82523d6000602084013e610a8e565b606091505b5050905080610ac9576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f0882625dff0945b5b56ae064433ad75087d6af1e762d31d793e4b10efa5589eb60405160405180910390a2600067ffffffffffffffff811115610b2757610b2661145e565b5b604051908082528060200260200182016040528015610b555781602001602082028036833780820191505090505b5060009080519060200190610b6b929190610b7a565b50426003819055505050505050565b828054828255906000526020600020908101928215610bf3579160200282015b82811115610bf25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b9a565b5b509050610c009190610c04565b5090565b5b80821115610c1d576000816000905550600101610c05565b5090565b6000610c34610c2f84611167565b611142565b90508083825260208201905082856020860282011115610c5757610c56611497565b5b60005b85811015610c875781610c6d8882610d85565b845260208401935060208301925050600181019050610c5a565b5050509392505050565b6000610ca4610c9f84611193565b611142565b905082815260208101848484011115610cc057610cbf61149c565b5b610ccb8482856112fe565b509392505050565b600082601f830112610ce857610ce7611492565b5b8135610cf8848260208601610c21565b91505092915050565b60008083601f840112610d1757610d16611492565b5b8235905067ffffffffffffffff811115610d3457610d3361148d565b5b602083019150836001820283011115610d5057610d4f611497565b5b9250929050565b600082601f830112610d6c57610d6b611492565b5b8135610d7c848260208601610c91565b91505092915050565b600081359050610d94816114d3565b92915050565b600081519050610da9816114d3565b92915050565b60008060208385031215610dc657610dc56114a6565b5b600083013567ffffffffffffffff811115610de457610de36114a1565b5b610df085828601610d01565b92509250509250929050565b600060208284031215610e1257610e116114a6565b5b600082013567ffffffffffffffff811115610e3057610e2f6114a1565b5b610e3c84828501610d57565b91505092915050565b600060208284031215610e5b57610e5a6114a6565b5b6000610e6984828501610d85565b91505092915050565b600060208284031215610e8857610e876114a6565b5b6000610e9684828501610d9a565b91505092915050565b60008060408385031215610eb657610eb56114a6565b5b6000610ec485828601610d85565b925050602083013567ffffffffffffffff811115610ee557610ee46114a1565b5b610ef185828601610cd3565b9150509250929050565b610f048161121f565b82525050565b610f1381611231565b82525050565b610f228161123d565b82525050565b6000610f33826111c4565b610f3d81856111cf565b9350610f4d81856020860161130d565b610f56816114ab565b840191505092915050565b610f6a816112b6565b82525050565b610f79816112c8565b82525050565b6000610f8c6000836111e0565b9150610f97826114bc565b600082019050919050565b610fab8161125a565b82525050565b610fba81611288565b82525050565b610fc981611292565b82525050565b610fd8816112a2565b82525050565b6000610fe982610f7f565b9150819050919050565b60006020820190506110086000830184610efb565b92915050565b60006040820190506110236000830185610efb565b6110306020830184610efb565b9392505050565b600060408201905061104c6000830185610f0a565b818103602083015261105e8184610f28565b90509392505050565b600060a08201905061107c6000830188610f19565b6110896020830187610fcf565b6110966040830186610fa2565b6110a36060830185610fc0565b6110b06080830184610fc0565b9695505050505050565b60006020820190506110cf6000830184610f61565b92915050565b60006020820190506110ea6000830184610f70565b92915050565b60006020820190506111056000830184610fb1565b92915050565b60006060820190506111206000830186610fb1565b61112d6020830185610fb1565b61113a6040830184610fb1565b949350505050565b600061114c61115d565b90506111588282611340565b919050565b6000604051905090565b600067ffffffffffffffff8211156111825761118161145e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111ae576111ad61145e565b5b6111b7826114ab565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006111f682611288565b915061120183611288565b925082821015611214576112136113a2565b5b828203905092915050565b600061122a82611268565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611255826114bf565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006112c1826112da565b9050919050565b60006112d382611247565b9050919050565b60006112e5826112ec565b9050919050565b60006112f782611268565b9050919050565b82818337600083830152505050565b60005b8381101561132b578082015181840152602081019050611310565b8381111561133a576000848401525b50505050565b611349826114ab565b810181811067ffffffffffffffff821117156113685761136761145e565b5b80604052505050565b600061137c82611288565b915061138783611288565b925082611397576113966113d1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600381106114d0576114cf611400565b5b50565b6114dc81611288565b81146114e757600080fd5b5056fea26469706673582212204ce4e4ca5a66f53b2762dfb39b0edfbb64c8a13a90c9f6b4c1264ca627e0070564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1174,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1177,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(VRFCoordinatorV2Interface)267"
      },
      {
        "astId": 1193,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1196,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(RaffleState)1157"
      },
      {
        "astId": 1198,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)267": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(RaffleState)1157": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}